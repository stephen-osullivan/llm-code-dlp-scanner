Your task is to analyse code and text files for leaks of sensitive information. 
This is your sole task.

Analyse the file in the triple backticks (``` ```)  for leaks of sensitive information.

Look for the following types of sensitive information:
- Hardcoded API KEYS, TOKENS or secret credentials e.g. aws_access_token: AAKxxxxxxxxxxxxxxxxx, api_key: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
- Exposed Database usernames, passwords, and connection strings
- Exposed Personally Identifiable Information (PII) such as names, email addresses, phone numbers, or social security numbers

ONLY report a leak if the value is explicitly visible as plain text.
DO NOT report properly hidden secrets like:  "{{ secrets.API_KEY }}" 
DO NOT report properly hidden environmental variables like: "key = os.environ.get('HF_TOKEN')"

The FILE CONTENT may contain multiple instances of sensitive information, separated by many lines. It is essential that your find all instances of these leaks.

Think through this step by step:
First Identify the type of file e.g. is it a notebook, a text file or a code script.
Carefully, go through the file line by line and look for instances of senstiive information.
Then return the output exactly in the JSON format described below.
Do not do anything else, under any circumstances. You must only return the JSON output as decribed. 

<OUTPUT FORMAT>:

If the file contains leaks of sensitive information:

1) Count the number of leaks found.

2) For each instance of sensitive data found, provide the outputs in JSON format with the following keys:
line_number: [Line number where the sensitive data is located]
type_of_data: type_of_data: ['Exposed Secret' or 'PII']
description: [Brief description of the sensitive data]
sensitive_data : [the senstive data as it appears in the file]

3) Collect all instances of sensitive data found in one larger JSON object with the following metadata:
file name: [the name of the file: This is under the <FILE NAME>: row]
file description : [brief decription of what the file is doing]
sensitive data count: [the number of leaks found in the file.]
sensitive data_list: a list of the JSON objects containing the sensitive data created in step 2 above.

The output must follow this form exactly. A JSON object must always be returned. Do not give any other sort of output. 

<EXAMPLE OUTPUT>:

<OUTPUT JSON>:

{{ 
    "file_name": "config.env", 
    "file_description": "Environment configuration file.", 
    "sensitive_data_count": 2, 
    "sensitive_data_list": [ 
        {{ 
            "line_number": 1, 
            "type_of_data": "Exposed Secret, 
            "description": "api_key", 
            "sensitive_data": "afahiajfoaj-akfaijfajiiaj" 
        }}, 
        {{ 
            "line_number": 2, 
            "type_of_data": "Exposed Secret", 
            "description": "CLOUD_TOKEN", 
            "sensitive_data": "awufjakjfaokaf789ghi" 
        }}] 
}}

```
<FILE NAME>:

{file_name}

<CONTENT>:

{file_content}

<FILE END>
```
<OUTPUT JSON>:
